deploy-application:
  runs-on: ubuntu-latest
  needs: provision-infrastructure
  env:
    ECR_REPO_URL: ${{ needs.provision-infrastructure.outputs.ecr_repo_url }}
    RDS_ENDPOINT: ${{ needs.provision-infrastructure.outputs.rds_endpoint }}
    CLUSTER_NAME: ${{ needs.provision-infrastructure.outputs.cluster_name }}
    AWS_REGION: ${{ secrets.AWS_REGION }}
    ECR_REPO: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nodejs-app
    GITHUB_SHA: ${{ github.sha }}
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image
      run: |
        echo "Debug: Environment variables:"
        echo "ECR_REPO_URL: '$ECR_REPO_URL'"
        echo "ECR_REPO: '$ECR_REPO'"
        echo "GITHUB_SHA: '$GITHUB_SHA'"
        
        # Use ECR_REPO_URL if available, otherwise fallback to ECR_REPO
        if [[ -n "$ECR_REPO_URL" ]]; then
          IMAGE_URI="$ECR_REPO_URL"
        else
          IMAGE_URI="$ECR_REPO"
        fi
        
        echo "Using IMAGE_URI: $IMAGE_URI"
        
        # Validate IMAGE_URI format
        if ! [[ "$IMAGE_URI" =~ ^[0-9]+\.dkr\.ecr\.[a-z0-9-]+\.amazonaws\.com\/.+$ ]]; then
          echo "Error: IMAGE_URI is not a valid AWS ECR URL: '$IMAGE_URI'"
          exit 1
        fi
        
        echo "Building Docker image..."
        docker build -t $IMAGE_URI:$GITHUB_SHA -f app/Dockerfile ./app
        docker tag $IMAGE_URI:$GITHUB_SHA $IMAGE_URI:latest
        
        echo "Pushing Docker image..."
        docker push $IMAGE_URI:$GITHUB_SHA
        docker push $IMAGE_URI:latest
        
        echo "âœ… Docker image pushed successfully"
        
        # Set IMAGE_URI for subsequent steps
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

    - name: Create Kubernetes secret
      run: |
        kubectl create secret generic db-secret \
          --from-literal=password=${{ secrets.RDS_PASSWORD }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy Node.js application
      run: |
        # Use IMAGE_URI from previous step, or fallback
        if [[ -n "$IMAGE_URI" ]]; then
          DOCKER_IMAGE="$IMAGE_URI:$GITHUB_SHA"
        elif [[ -n "$ECR_REPO_URL" ]]; then
          DOCKER_IMAGE="$ECR_REPO_URL:$GITHUB_SHA"
        else
          DOCKER_IMAGE="$ECR_REPO:$GITHUB_SHA"
        fi
        
        echo "Deploying with Docker image: $DOCKER_IMAGE"
        sed -i "s|{{IMAGE_URI}}|$DOCKER_IMAGE|g" k8s/deployment.yaml
        sed -i "s|{{RDS_ENDPOINT}}|$RDS_ENDPOINT|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/nodejs-app --timeout=180s

    - name: Deploy monitoring stack
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack \
          --namespace monitoring \
          --create-namespace \
          --set grafana.adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD }} \
          --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
          --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false

