name: Deploy Node.js App to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  ECR_REPO: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nodejs-app

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init
      working-directory: infra

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: infra
      env:
        TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}
        TF_VAR_cluster_name: ${{ env.CLUSTER_NAME }}
        TF_VAR_region: ${{ env.AWS_REGION }}

    - name: Get Terraform outputs
      id: terraform
      run: |
        echo "ecr_repo_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
        echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV
        echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_ENV

  deploy-application:
    runs-on: ubuntu-latest
    needs: provision-infrastructure
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image
      run: |
        docker build -t $ECR_REPO:$GITHUB_SHA -f app/Dockerfile ./app
        docker tag $ECR_REPO:$GITHUB_SHA $ECR_REPO:latest
        docker push $ECR_REPO:$GITHUB_SHA
        docker push $ECR_REPO:latest

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

    - name: Create Kubernetes secret
      run: |
        kubectl create secret generic db-secret \
          --from-literal=password=${{ secrets.RDS_PASSWORD }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy Node.js application
      run: |
        # Replace placeholders in manifest
        sed -i "s|{{IMAGE_URI}}|$ECR_REPO:$GITHUB_SHA|g" k8s/deployment.yaml
        sed -i "s|{{RDS_ENDPOINT}}|${{ env.RDS_ENDPOINT }}|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/nodejs-app --timeout=180s

    - name: Deploy monitoring stack
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack \
          --namespace monitoring \
          --create-namespace \
          --set grafana.adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD }} \
          --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
          --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false
