name: Deploy Node.js App to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  ECR_REPO: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nodejs-app

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      ecr_repo_url: ${{ steps.terraform.outputs.ecr_repo_url }}
      rds_endpoint: ${{ steps.terraform.outputs.rds_endpoint }}
      cluster_name: ${{ steps.terraform.outputs.cluster_name }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init
      working-directory: infra

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: infra
      env:
        TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}
        TF_VAR_cluster_name: ${{ env.CLUSTER_NAME }}
        TF_VAR_region: ${{ env.AWS_REGION }}

    - name: Get Terraform outputs
      id: terraform
      run: |
        # Method 1: Try JSON output first (most reliable)
        echo "Attempting to get Terraform outputs using JSON method..."
        if terraform output -json > outputs.json 2>/dev/null; then
          ECR_REPO_URL=$(jq -r '.ecr_repository_url.value' outputs.json 2>/dev/null || echo "")
          RDS_ENDPOINT=$(jq -r '.rds_endpoint.value' outputs.json 2>/dev/null || echo "")
          CLUSTER_NAME=$(jq -r '.cluster_name.value' outputs.json 2>/dev/null || echo "")
          rm -f outputs.json
        else
          echo "JSON method failed, trying raw output method..."
          # Method 2: Fallback to raw output
          ECR_REPO_URL=$(terraform output -raw ecr_repository_url 2>/dev/null | tr -d '\r\n\t' | sed 's/[^[:print:]]//g' || echo "")
          RDS_ENDPOINT=$(terraform output -raw rds_endpoint 2>/dev/null | tr -d '\r\n\t' | sed 's/[^[:print:]]//g' || echo "")
          CLUSTER_NAME=$(terraform output -raw cluster_name 2>/dev/null | tr -d '\r\n\t' | sed 's/[^[:print:]]//g' || echo "")
        fi
        
        # Debug: Show what we got
        echo "Raw outputs:"
        echo "ECR_REPO_URL: '$ECR_REPO_URL'"
        echo "RDS_ENDPOINT: '$RDS_ENDPOINT'"
        echo "CLUSTER_NAME: '$CLUSTER_NAME'"
        
        # Validate outputs
        if [[ -z "$ECR_REPO_URL" ]]; then
          echo "Warning: ECR_REPO_URL is empty, will use fallback"
        fi
        if [[ -z "$RDS_ENDPOINT" ]]; then
          echo "Warning: RDS_ENDPOINT is empty"
        fi
        if [[ -z "$CLUSTER_NAME" ]]; then
          echo "Warning: CLUSTER_NAME is empty, will use environment variable"
        fi
        
        # Set job outputs
        echo "ecr_repo_url=$ECR_REPO_URL" >> $GITHUB_OUTPUT
        echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
        echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
        
        # Debug output
        echo "✅ Terraform outputs processed"
      working-directory: infra

  deploy-application:
    runs-on: ubuntu-latest
    needs: provision-infrastructure
    env:
      ECR_REPO_URL: ${{ needs.provision-infrastructure.outputs.ecr_repo_url }}
      RDS_ENDPOINT: ${{ needs.provision-infrastructure.outputs.rds_endpoint }}
      CLUSTER_NAME_OUTPUT: ${{ needs.provision-infrastructure.outputs.cluster_name }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image
      run: |
        # Debug: Show all environment variables
        echo "Debug: Environment variables:"
        echo "ECR_REPO_URL: '$ECR_REPO_URL'"
        echo "ECR_REPO: '$ECR_REPO'"
        echo "GITHUB_SHA: '$GITHUB_SHA'"
        
        # Use ECR_REPO_URL if available, otherwise fallback to ECR_REPO
        if [[ -n "$ECR_REPO_URL" ]]; then
          IMAGE_URI="$ECR_REPO_URL"
        else
          IMAGE_URI="$ECR_REPO"
        fi
        
        echo "Using IMAGE_URI: $IMAGE_URI"
        
        # Validate IMAGE_URI is not empty
        if [[ -z "$IMAGE_URI" ]]; then
          echo "Error: IMAGE_URI is empty. Cannot build Docker image."
          exit 1
        fi
        
        echo "Building Docker image..."
        docker build -t $IMAGE_URI:$GITHUB_SHA -f app/Dockerfile ./app
        docker tag $IMAGE_URI:$GITHUB_SHA $IMAGE_URI:latest
        
        echo "Pushing Docker image..."
        docker push $IMAGE_URI:$GITHUB_SHA
        docker push $IMAGE_URI:latest
        
        echo "✅ Docker image pushed successfully"
        
        # Set IMAGE_URI for subsequent steps
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

    - name: Create Kubernetes secret
      run: |
        kubectl create secret generic db-secret \
          --from-literal=password=${{ secrets.RDS_PASSWORD }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy Node.js application
      run: |
        # Use IMAGE_URI from previous step, or fallback
        if [[ -n "$IMAGE_URI" ]]; then
          DOCKER_IMAGE="$IMAGE_URI:$GITHUB_SHA"
        elif [[ -n "$ECR_REPO_URL" ]]; then
          DOCKER_IMAGE="$ECR_REPO_URL:$GITHUB_SHA"
        else
          DOCKER_IMAGE="$ECR_REPO:$GITHUB_SHA"
        fi
        
        echo "Deploying with Docker image: $DOCKER_IMAGE"
        
        # Replace placeholders in manifest
        sed -i "s|{{IMAGE_URI}}|$DOCKER_IMAGE|g" k8s/deployment.yaml
        sed -i "s|{{RDS_ENDPOINT}}|$RDS_ENDPOINT|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/nodejs-app --timeout=180s

    - name: Deploy monitoring stack
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack \
          --namespace monitoring \
          --create-namespace \
          --set grafana.adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD }} \
          --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
          --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false
